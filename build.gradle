import java.awt.Desktop

buildscript {
    repositories {}
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.3'
    id 'org.kordamp.markdown.convert' version '1.2.0'
}

// configures version for release plugin
scmVersion {
    tag {
        prefix = 'tduf'
    }
}

// Helper script
apply from: './src/main/groovy/helper.gradle'

// Project definition
allprojects {
    project.group = 'fr.tduf'

    // version defined by plugin (if changes or ahead commits: x.y.z-SNAPSHOT)
    project.version = scmVersion.version

    // Version for common dependencies
    ext {
        args4jVersion = '2.33'
        
        assertjVersion = '3.15.0'

        commonsLangVersion = '3.10'

        exp4jVersion = '0.4.8'

        j5systemexitVersion = '1.0.0'

        jacksonVersion = '2.10.3'

        jaxbapiVersion = '2.3.1'

        jsonassertVersion = '1.5.0'

        junitJupiterVersion = '5.6.2'

        minlogVersion = '1.3.1'

        mockitoVersion = '3.3.3'

        testfxVersion = '4.0.16-alpha'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.kordamp.markdown.convert'

    repositories {
        maven  {
            url "https://repo1.maven.org/maven2"
        }

        flatDir name: 'embeddedRepository', dirs: '../lib'
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: "$commonsLangVersion"
        implementation group: 'com.esotericsoftware', name: 'minlog', version: "$minlogVersion"

        testImplementation project(':lib-testing')
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitJupiterVersion"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitJupiterVersion"
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    task copyMainScripts(type: Copy) {
        description 'Copies CLI main scripts to release directory (for single module packaging).'
        mustRunAfter ':cleanPackDir'

        if (project.hasProperty('target') && target == LINUX_TARGET) {
            from 'src/main/shell/linux/'
            include '*.sh'
        } else {
            from 'src/main/shell/windows/'
            include '*.cmd'
        }

        into '../pack/'
    }

    task copyUtilScripts(type: Copy) {
        description 'Copies CLI utility scripts to pack/tools/cli directory (for single module packaging).'
        mustRunAfter ':cleanPackDir'

        if (project.hasProperty('target') && target == LINUX_TARGET) {
            from '../src/main/shell/linux/cli-util/'
            include '*.sh'
            include 'linux-aliases'
        } else {
            from '../src/main/shell/windows/cli-util/'
            include '*.cmd'
        }

        into '../pack/tools/cli'
    }

    task copyDoc(type: Copy) {
        description 'Copies formatted README to release directory (for single module packaging).'
        mustRunAfter 'markdownToHtml'

        from "$buildDir/gen-html"
        include '*.html'
        into '../pack/'
    }

    task updateExternalTools(type: Copy) {
        description 'Copies external tools to installer development tree to ensure proper functioning.'

        from '../tools/'
        into 'tools/'
    }    
}

project(':lib-testing') {
    apply plugin: 'java-library'

    dependencies {
        api group: 'org.assertj', name: 'assertj-core', version: "$assertjVersion"
        api group: 'org.skyscreamer', name: 'jsonassert', version: "$jsonassertVersion"
        api group: 'org.mockito', name: 'mockito-core', version: "$mockitoVersion"
        api group: 'org.testfx', name: 'testfx-junit5', version: "$testfxVersion"
        api group: 'com.ginsberg', name: 'junit5-system-exit', version: "$j5systemexitVersion"

        implementation project(':lib-unlimited')
    }
}

project(':lib-unlimited') {
    apply plugin: 'java-library'

    dependencies {
        implementation group: 'net.objecthunter', name: 'exp4j', version: "$exp4jVersion"
        implementation group: 'javax.xml.bind', name: 'jaxb-api', version: "$jaxbapiVersion"
        implementation group: 'io.github.classgraph', name: 'classgraph', version: "4.8.80"

        api group: 'commons-io', name: 'commons-io', version: '2.6'
    }

    task copyStructures(type: Copy) {
        description 'Copies structures to release directory.'
        group 'packaging'

        from 'src/main/resources/files/structures/'
        include '*'
        into '../pack/structures'
    }
}

project(':cli') {
    dependencies {
        implementation project(':lib-unlimited')
        implementation group: 'args4j', name: 'args4j', version: "$args4jVersion"
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}

project(':gui-common') {
    apply plugin: 'java-library'

    dependencies {
        api project(':lib-unlimited')

        testImplementation project(':lib-testing')
    }
}

project(':gui-database') {
    dependencies {
        implementation project(':gui-common')
    }

    task execute(type:JavaExec) {
        group 'binaries'

        main 'fr.tduf.gui.database.DatabaseEditor'
        classpath sourceSets.main.runtimeClasspath
    }

    task copyThemes(type: Copy) {
        description 'Copies all default themes to release directory.'
        group 'packaging'
        mustRunAfter ':cleanPackDir'

        from 'src/main/resources/gui-database/css/themes/'
        include '*.css'
        into '../pack/themes/'
    }
}

project(':integ-tests') {
    dependencies {
        testImplementation project(':lib-testing')
        testImplementation project(':lib-unlimited')
        testImplementation project(':cli')
    }

    task integTestReport() {
        group 'verification'

        doLast {
            // On CI, reports are published to AWS
            if (System.getenv('CI') == null) {
                // Local dev machine
                def reportFileAbsolutePath = file('./build/reports/tests/test/index.html').toString().replaceAll('\\\\', '/')
                try {
                    Desktop.desktop.browse(('file://' + reportFileAbsolutePath).toURI())
                } catch (error) {
                    System.err.println('Could not display integ test results!')
                    System.err.println(error)
                }
            }
        }
    }
    tasks.test.finalizedBy tasks.integTestReport
}

// Main tasks
def tempJarDirectory = 'tmp-jarContents/'

task gatherFullContentsForJar(type: Copy, dependsOn: getFullProjects().collect{ it+":compileJava"}) {
    description 'Copies contents to temp directory (full packaging).'
    group 'build'

    // Project sources
    from files(getFullProjects().collect{ project(it).sourceSets.main.output })
    // External libraries
    from files(getFullProjects().collect{ project(it).configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } )
    into tempJarDirectory
}

task gatherDatabaseEditorContentsForJar(type: Copy, dependsOn: getDatabaseEditorProjects().collect{ it+":compileJava"}) {
    description 'Copies contents to temp directory (Database Editor packaging).'
    group 'build'

    // Project sources
    from files(getDatabaseEditorProjects().collect{ project(it).sourceSets.main.output })
    // External libraries
    from files(getDatabaseEditorProjects().collect{ project(it).configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } )
    into tempJarDirectory
}

task gatherCoreContentsForJar(type: Copy, dependsOn: getCoreProjects().collect{ it+":compileJava"}) {
    description 'Copies contents to temp directory (Core packaging).'
    group 'build'

    // Project sources
    from files(getCoreProjects().collect{ project(it).sourceSets.main.output })
    // External libraries
    from files(getCoreProjects().collect{ project(it).configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } )
    into tempJarDirectory
}

// Common operations
def jarOps = {
    description 'Creates jar with all contents from temp directory.'
    group 'build'

    archiveName 'tduf.jar'
    destinationDir new File('pack/tools/lib/')
    from tempJarDirectory 
}

def packOps = {
    group 'packaging'
    
    destinationDir new File('releases/')
    from  'pack/'
}

task fullJar( type: Jar , dependsOn: 'gatherFullContentsForJar' )
fullJar jarOps

task databaseEditorJar( type: Jar , dependsOn: 'gatherDatabaseEditorContentsForJar' )
databaseEditorJar jarOps

task coreJar( type: Jar , dependsOn: 'gatherCoreContentsForJar' )
coreJar jarOps

task packCore(dependsOn: getCoreDependencies(), type: Zip) {
    description 'Create single release Zip with CORE components releases directory.'

    def targetName = (project.hasProperty('target') && target == LINUX_TARGET) ? 'linux' : 'windows'
    archiveName "tduf-core-$project.version-${targetName}.zip"

    doLast {
        println("(i) Core packaging for target *$targetName*")
    }
}
packCore packOps

task packFull(dependsOn: getFullDependencies(), type: Zip) {
    description 'Create single release Zip with ALL components except InstallerKit in releases directory.'

    def targetName = (project.hasProperty('target') && target == LINUX_TARGET) ? 'linux' : 'windows'
    archiveName "tduf-$project.version-${targetName}.zip"

    doLast {
        println("(i) Full packaging for target *$targetName*")
    }
}
packFull packOps

task packDatabaseEditor(dependsOn: getDatabaseEditorDependencies(), type: Zip) {
    description 'Zips only DatabaseEditor, LIB files from pack folder.'
    
    def targetName = (project.hasProperty('target') && target == LINUX_TARGET) ? 'linux' : 'windows'
    archiveName "tduf-DatabaseEditor-$project.version-${targetName}.zip"
    
    doLast {
        println("(i) DatabaseEditor packaging for target *$targetName*")
    }
}
packDatabaseEditor packOps

task cleanPackDir(type: Delete) {
    description 'Prepares new package by removing all files in pack directory.'
    group 'packaging'

    delete 'pack/'
}

task cleanTempJarDir(type: Delete) {
    description 'Prepares new package by removing all files in tmp-jarContents directory.'
    group 'packaging'

    delete tempJarDirectory
}

task copyDoc(type: Copy) {
    description 'Copies formatted README to release directory.'
    group 'packaging'
    mustRunAfter 'markdownToHtml'

    from "$buildDir/gen-html"
    include '*.html'
    into 'pack/'
}

task copySharedScripts(type: Copy) {
    description 'Copies project-shared scripts to release directory.'
    group 'packaging'
    mustRunAfter ':cleanPackDir'

    if (project.hasProperty('target') && target == LINUX_TARGET) {
        from 'src/main/shell/linux/'
        include '*.sh'
    } else {
        from 'src/main/shell/windows/'
        include '*.cmd'
    }
    
    into 'pack/'
}

task copyUtilScripts(type: Copy) {
    description 'Copies support scripts to release/tools/cli directory.'
    group 'packaging'
    mustRunAfter 'cleanPackDir'

    if (project.hasProperty('target') && target == LINUX_TARGET) {
        from 'src/main/shell/linux/cli-util/'
        include '*.sh'
        include 'linux-aliases'
    } else {
        from 'src/main/shell/windows/cli-util/'
        include '*.cmd'
    }
    
    into 'pack/tools/cli'
}

task copyExternalTools(type: Copy) {
    description 'Copies all external tools to release directory.'
    group 'packaging'
    mustRunAfter 'cleanPackDir'

    from 'tools'
    exclude 'readme'
    into 'pack/tools'
}

task copyVersionInfo(type: Copy) {
    description 'Copies version.info file to release libs directory.'
    group 'packaging'
    mustRunAfter 'cleanPackDir'

    from 'dist/'
    include 'version.info'
    into 'pack/tools/lib/'
}

task copyIcons(type: Copy) {
    description 'Copies common GUI icon to packs/icons directory.'
    group 'packaging'
    mustRunAfter 'cleanPackDir'

    from 'gui-common/src/main/resources/gui-common/img/icons'
    include 'TDU-256px.png'
    include 'TDU-256px.ico'
    into 'pack/icons'
}
