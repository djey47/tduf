import java.awt.Desktop

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.4.1'
    id 'org.kordamp.markdown.convert' version '1.1.0'
}

// configure version
scmVersion {
    tag {
        prefix = 'tduf'
    }
}

// Project definition
allprojects {
    project.group = 'fr.tduf'
    // version defined by plugin (if changes or ahead commits: x.y.z-SNAPSHOT)
    project.version = scmVersion.version

    // Version for common dependencies
    ext {
        assertjVersion = '3.6.1'
        
        jsonassertVersion = '1.4.0'

        junitVersion = '4.12'
        junitJupiterVersion = '5.0.0-M3'
        junitPlatformVersion = '1.0.0-M3'
        
        mockitoVersion = '2.2.26'

        minlogVersion = '1.2'

        commonsLangVersion = '3.5'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'

    repositories {
        maven  {
            url "http://repo1.maven.org/maven2"
        }

        flatDir name: 'embeddedRepository', dirs: '../lib'
    }

    dependencies {
        compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: "$commonsLangVersion"
        compile group: 'com.esotericsoftware.minlog', name: 'minlog', version: "$minlogVersion"

        testCompile project(':lib-testing')

        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitJupiterVersion"
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitJupiterVersion"

        testCompile group: 'junit', name: 'junit', version: "$junitVersion"
        testRuntime group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "$junitVersion.0-M3"

        testCompile group: 'org.mockito', name: 'mockito-core', version: "$mockitoVersion"
        testCompile group: 'org.assertj', name: 'assertj-core', version: "$assertjVersion"
        testCompile group: 'org.skyscreamer', name: 'jsonassert', version: "$jsonassertVersion"
        testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.8.0'
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    junitPlatform {
        platformVersion "$junitPlatformVersion"
        filters {
            includeClassNamePattern '.*Test'
        }
    }

    task fatJar(type: Jar) {
        mustRunAfter 'jar'
        description 'Generates jar with all dependencies bundled into it.'

        baseName = 'tduf-' + project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}

project(':integ-tests') {
    dependencies {
        testCompile project(':cli')
    }

    junitPlatform {
        filters {
            includeClassNamePattern '.*IntegTest'
        }
    }

    task integTestReport() {
        doLast {
            def reportFileAbsolutePath = file('./build/reports/tests/test/index.html').toString().replaceAll('\\\\', '/')
            Desktop.desktop.browse(('file://' + reportFileAbsolutePath).toURI())
        }
    }
    // Unsupported by codeship CI
//    tasks.test.finalizedBy tasks.integTestReport
}

project(':cli') {
    dependencies {
        compile project(':lib-unlimited')
        compile group: 'args4j', name: 'args4j', version: '2.33'
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

}

project('lib-testing') {
    // Should use 4.x Junit because of rules
    dependencies {
        compile project(':lib-unlimited')
        compile group: 'junit', name: 'junit', version: "$junitVersion"
        compile group: 'org.assertj', name: 'assertj-core', version: "$assertjVersion"
        compile group: 'org.skyscreamer', name: 'jsonassert', version: "$jsonassertVersion"
    }
}

project('lib-unlimited') {
    dependencies {
        compile group: 'net.objecthunter', name: 'exp4j', version: '0.4.7'
        compile group: 'commons-io', name: 'commons-io', version: '2.5'
    }

    task copyStructures(type: Copy) {
        description 'Copies structures to release directory.'

        from 'src/main/resources/files/structures/'
        include '*'
        into '../pack/structures'
    }
}

project(':gui-common') {
    dependencies {
        compile project(':lib-unlimited')

        testCompile group: 'com.esotericsoftware.minlog', name: 'minlog', version: "$minlogVersion"
    }
}

project(':gui-database') {
    dependencies {
        compile project(':lib-unlimited')
        compile project(':gui-common')
    }

    task execute(type:JavaExec) {
        main 'fr.tduf.gui.database.DatabaseEditor'
        classpath sourceSets.main.runtimeClasspath
    }

    task copyProfiles(type: Copy) {
        description 'Copies all default profiles to release directory.'
        mustRunAfter ':cleanPackDir'

        from 'editorProfiles/'
        into '../pack/editorProfiles/'
    }
}

project(':gui-savegame') {
    dependencies {
        compile project(':lib-unlimited')
        compile project(':gui-common')
    }

    task execute(type:JavaExec) {
        main 'fr.tduf.gui.savegame.SaveGameEditor'
        classpath sourceSets.main.runtimeClasspath
    }
}

project(':gui-installer') {
    apply plugin: 'org.kordamp.markdown.convert'

    dependencies {
        compile project(':lib-unlimited')
        compile project(':gui-common')
    }

    task execute(type: JavaExec) {
        main 'fr.tduf.gui.installer.Installer'
        classpath sourceSets.main.runtimeClasspath
    }

    task copyDoc(type: Copy) {
        description 'Copies formatted README to release directory.'
        mustRunAfter 'markdownToHtml'

        from "$buildDir/gen-html"
        include '*.html'
        into '../pack/'
    }

    task copyAssets(type: Copy) {
        description 'Copies all assets directory structure to release directory.'
        mustRunAfter ':cleanPackDir'

        from 'assets/'
        into '../pack/assets/'
    }

    task copyTemplates(type: Copy) {
        description 'Copies all patch templates to release directory.'
        mustRunAfter ':cleanPackDir'

        from 'patchTemplates/'
        into '../pack/tools/patchTemplates/'
    }

    task copyMainScripts(type: Copy) {
        description 'Copies CLI main scripts to release directory.'
        mustRunAfter ':cleanPackDir'

        from 'src/main/shell/'
        include '*.cmd'
        into '../pack/'
    }

    task copyUtilScripts(type: Copy) {
        description 'Copies CLI utility scripts to pack/tools/cli directory.'
        mustRunAfter ':cleanPackDir'

        from '../src/main/shell/cli-util/'
        include 'AdminRun.cmd'
        include 'CheckJava.cmd'
        include 'SetVersion.cmd'
        into '../pack/tools/cli'
    }

    task copyJar(type: Copy) {
        description 'Copies jar file to release directory.'

        from fatJar
        into '../pack/tools/lib/'
    }

    task updateExternalTools(type: Copy) {
        description 'Copies external tools to installer development tree to ensure proper functioning.'

        from '../tools/'
        into 'tools/'
    }
}

// Main tasks
// Create a list of subprojects to include in the full jar.
def fullProjects = [':cli',':gui-database',':gui-savegame']
def tempJarDirectory = './tmp-jarContents'

task gatherAllContentsForJar(type: Copy, dependsOn: fullProjects.collect{ it+":compileJava"}) {
    description 'Copies contents to temp directory.'

    from files(fullProjects.collect{ project(it).sourceSets.main.output })
    from files(fullProjects.collect{ project(it).configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } )
    into tempJarDirectory
}

task fullJar( type: Jar , dependsOn: 'gatherAllContentsForJar' ) {
    description 'Creates jar with all contents from temp directory.'

    destinationDir = file('./pack/tools/lib/')
    baseName = 'tduf'
    from tempJarDirectory
}

task packFull(dependsOn: [  'cleanTempJarDir', 'cleanPackDir',
                            'copyMainScripts',
                            'markdownToHtml',
                            'copyDoc', 'copyExternalTools', 'copyUtilScripts', 'copyVersionInfo',
                            ':lib-unlimited:copyStructures',
                            ':gui-database:copyProfiles',
                            'fullJar'], type: Zip) {
    description 'Create single release Zip with ALL components except InstallerKit in releases directory.'

    archiveName  "tduf-" + project.version + ".zip"
    destinationDir new File('releases/')
    from  'pack/'
}

task packInstallerKit(dependsOn: [  'cleanPackDir',
                                    ':gui-installer:copyMainScripts',
                                    ':gui-installer:markdownToHtml',
                                    ':gui-installer:copyDoc', 'copyExternalTools', ':gui-installer:copyUtilScripts', 'copyVersionInfo',
                                    ':gui-installer:copyAssets', ':gui-installer:copyTemplates',
                                    ':gui-installer:copyJar'], type: Zip) {
    description 'Zips only IK, LIB files from pack folder.'

    archiveName "tduf-IK-" + project.version + ".zip"
    destinationDir new File('releases/')
    from  'pack/'
}

task cleanPackDir(type: Delete) {
    description 'Prepares new package by removing all files in pack directory.'
    delete 'pack/'
}

task cleanTempJarDir(type: Delete) {
    description 'Prepares new package by removing all files in tmp-jarContents directory.'
    delete tempJarDirectory
}

task copyDoc(type: Copy) {
    description 'Copies formatted README to release directory.'
    mustRunAfter 'markdownToHtml'

    from "$buildDir/gen-html"
    include '*.html'
    into 'pack/'
}

task copyMainScripts(type: Copy) {
    description 'Copies CLI main scripts to release directory.'
    mustRunAfter ':cleanPackDir'

    from 'src/main/shell/'
    include '*.cmd'
    into 'pack/'
}

task copyUtilScripts(type: Copy) {
    description 'Copies CLI utility scripts to release/tools/cli directory.'
    mustRunAfter 'cleanPackDir'

    from 'src/main/shell/cli-util/'
    include '*.cmd'
    into 'pack/tools/cli'
}

task copyExternalTools(type: Copy) {
    description 'Copies all external tools to release directory.'
    mustRunAfter 'cleanPackDir'

    from 'tools'
    into 'pack/tools'
}

task copyVersionInfo(type: Copy) {
    description 'Copies version.info file to release libs directory.'
    mustRunAfter 'cleanPackDir'

    from 'dist/'
    include 'version.info'
    into 'pack/tools/lib/'
}

task wrapper(type: Wrapper) {
    gradleVersion = getGradleVersion()
}
