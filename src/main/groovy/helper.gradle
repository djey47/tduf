// Build helpers script

/**
 * Available values for target argument
 */
def PARAM_LINUX_TARGET = 'linux'
def PARAM_WINDOWS_TARGET = 'windows'

def fullCleanDeps = [ 'cleanTempJarDir', 'cleanPackDir' ]
def singleCleanDeps = [ 'cleanPackDir' ]
def externalDeps = [ 'copyExternalTools', 'copyVersionInfo', 'copyIcons' ]

// List of subprojects to include in the full jar.
def fullProjects = [':lib-unlimited', ':cli', ':gui-common', ':gui-database', ':gui-launcher']

/**
 * @returns List of tasks to depend on for FULL packaging, according to target (linux or windows)
 */
def fullPackDependencies = { String target ->
    def commonPackDeps = [ ':gui-database:markdownToHtml', ':gui-launcher:markdownToHtml', 'markdownToHtml',
                           ':gui-database:copyDoc', ':gui-launcher:copyDoc', 'copyDoc',
                           *externalDeps,
                           ':lib-unlimited:copyStructures',
                           ':gui-database:copyProfiles',
                           'fullJar' ]

    def winPackDeps = [ ':gui-database:copyMainScripts', ':gui-launcher:copyMainScripts', 'copyMainScripts', 'copyUtilScripts' ]

    def linuxPackDeps = [ ':gui-database:copyMainScripts', ':gui-launcher:copyMainScripts', 'copyMainScripts', 'copyUtilScripts' ]

    def isLinuxPackaging = target == PARAM_LINUX_TARGET
    return [ *fullCleanDeps,
             *(isLinuxPackaging ? linuxPackDeps : winPackDeps),
             *commonPackDeps ]
}

/**
 * @returns List of tasks to depend on for IK packaging, according to target (linux or windows)
 */
def installerPackDependencies = { String target ->
    def commonPackDeps = [ ':gui-installer:markdownToHtml',
                           ':gui-installer:copyDoc',
                           *externalDeps,
                           ':gui-installer:copyAssets', ':gui-installer:copyTemplates',
                           ':gui-installer:copyJar' ]

    def winPackDeps = [ ':gui-installer:copyMainScripts', ':gui-installer:copyUtilScripts' ]

    def linuxPackDeps = [ ':gui-installer:copyMainScripts', ':gui-installer:copyUtilScripts' ]

    def isLinuxPackaging = target == PARAM_LINUX_TARGET
    return [ *singleCleanDeps,
             *(isLinuxPackaging ? linuxPackDeps : winPackDeps),
             *commonPackDeps ]
}

/**
 * @returns List of tasks to depend on for DatabaseEditor packaging, according to target (linux or windows)
 */
def databaseEditorPackDependencies = { String target ->
    def commonPackDeps = [ ':gui-database:markdownToHtml',
                           ':gui-database:copyDoc',
                           *externalDeps,
                           ':gui-database:copyProfiles',
                           ':gui-database:copyJar' ]

    def winPackDeps = [ ':gui-database:copyMainScripts', ':gui-database:copyUtilScripts' ]

    def linuxPackDeps = [ ':gui-database:copyMainScripts', ':gui-database:copyUtilScripts' ]

    def isLinuxPackaging = target == PARAM_LINUX_TARGET
    return [ *singleCleanDeps,
             *(isLinuxPackaging ? linuxPackDeps : winPackDeps),
             *commonPackDeps ]
}

ext {
    getFullProjects = { -> fullProjects }
    getFullDependencies = fullPackDependencies
    getInstallerDependencies = installerPackDependencies
    getDatabaseEditorDependencies = databaseEditorPackDependencies
    LINUX_TARGET = PARAM_LINUX_TARGET
    WINDOWS_TARGET = PARAM_WINDOWS_TARGET
}
