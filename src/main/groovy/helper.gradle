// Build helpers script

/**
 * Available values for target argument
 */
def PARAM_LINUX_TARGET = 'linux'
def PARAM_WINDOWS_TARGET = 'windows'

// Task dependencies
def fullCleanDeps = [ 'cleanTempJarDir', 'cleanPackDir' ]
def externalDeps = [ 'copyExternalTools', 'copyVersionInfo', 'copyIcons' ]
def coreExternalDeps = [ 'copyExternalTools', 'copyVersionInfo' ]

// List of subprojects to include in the jar.
def coreProjects = [':lib-unlimited', ':cli']
def fullProjects = [':lib-unlimited', ':cli', ':gui-common', ':gui-database', ':gui-launcher']
def ikProjects = [':lib-unlimited', ':gui-common', ':gui-installer']
def databaseEditorProjects = [':lib-unlimited', ':gui-common', ':gui-database']

/**
 * @returns List of tasks to depend on for CORE packaging, according to target (linux or windows)
 */
def corePackDependencies = { ->
    def packDeps = [    *coreExternalDeps,
                        'cli:copyMainScripts', 'copyUtilScripts',
                        'fullJar' ]

    return [ *fullCleanDeps,
             *packDeps ]
}

/**
 * @returns List of tasks to depend on for FULL packaging, according to target (linux or windows)
 */
def fullPackDependencies = { ->
    def commonPackDeps = [ ':gui-database:markdownToHtml', ':gui-launcher:markdownToHtml', 'markdownToHtml',
                           ':gui-database:copyDoc', ':gui-launcher:copyDoc', 'copyDoc',
                           *externalDeps,
                           ':lib-unlimited:copyStructures',
                           ':gui-database:copyProfiles',
                           'fullJar' ]

    def packDeps = [  'cli:copyMainScripts', ':gui-database:copyMainScripts', ':gui-launcher:copyMainScripts', 'copySharedScripts', 'copyUtilScripts' ]

    return [ *fullCleanDeps,
             *packDeps,
             *commonPackDeps ]
}

/**
 * @returns List of tasks to depend on for IK packaging, according to target (linux or windows)
 */
def installerPackDependencies = { ->
    def commonPackDeps = [ ':gui-installer:markdownToHtml',
                           ':gui-installer:copyDoc',
                           *externalDeps,
                           ':gui-installer:copyAssets', ':gui-installer:copyTemplates',
                           'ikJar' ]

    def packDeps = [ ':gui-installer:copyMainScripts', ':gui-installer:copyUtilScripts', 'copySharedScripts' ]

    return [ *fullCleanDeps,
             *packDeps,
             *commonPackDeps ]
}

/**
 * @returns List of tasks to depend on for DatabaseEditor packaging, according to target (linux or windows)
 */
def databaseEditorPackDependencies = { ->
    def commonPackDeps = [ ':gui-database:markdownToHtml',
                           ':gui-database:copyDoc',
                           *externalDeps,
                           ':gui-database:copyProfiles',
                           'databaseEditorJar' ]

    def packDeps = [ ':gui-database:copyMainScripts', ':gui-database:copyUtilScripts', 'copySharedScripts' ]

    return [ *fullCleanDeps,
             *packDeps,
             *commonPackDeps ]
}

ext {
    getCoreProjects = { -> coreProjects }
    getFullProjects = { -> fullProjects }
    getIKProjects = { -> ikProjects }
    getDatabaseEditorProjects = { -> databaseEditorProjects }
    getCoreDependencies = corePackDependencies
    getFullDependencies = fullPackDependencies
    getInstallerDependencies = installerPackDependencies
    getDatabaseEditorDependencies = databaseEditorPackDependencies
    LINUX_TARGET = PARAM_LINUX_TARGET
    WINDOWS_TARGET = PARAM_WINDOWS_TARGET
}
